generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  isAdmin       Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  phone         String?   @unique
  bookings      Booking[]
  barberProfile Barber? // Relação opcional com Barber
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?

}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barber {
  id           String           @id @default(uuid())
  name         String
  email        String           @unique // Adicionado campo email único
  imageUrl     String?
  bio          String?
  barbershopId String
  barbershop   Barbershop       @relation(fields: [barbershopId], references: [id])
  schedules    BarberSchedule[]
  bookings     Booking[]
  timeslots    TimeSlot[]
  user         User             @relation(fields: [email], references: [email]) // Relação com User através do email
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model BarberSchedule {
  id        String   @id @default(uuid())
  barberId  String
  barber    Barber   @relation(fields: [barberId], references: [id])
  dayOfWeek Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([barberId, dayOfWeek])
}

model TimeSlot {
  id           String     @id @default(uuid())
  time         String
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barberId     String
  barber       Barber     @relation(fields: [barberId], references: [id])
  isAvailable  Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([barbershopId, barberId, time])
}

model Barbershop {
  id          String              @id @default(uuid())
  name        String
  address     String
  phones      String[]
  isClosed    Boolean             @default(false)
  description String
  imageUrl    String
  items       Item[]              @relation("BarbershopItems")
  barbers     Barber[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  services    BarbershopService[]
  timeSlots   TimeSlot[]
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  duration     Int        @default(30)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id        String            @id @default(uuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  barberId  String
  barber    Barber            @relation(fields: [barberId], references: [id])
  serviceId String
  service   BarbershopService @relation(fields: [serviceId], references: [id])
  date      DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  totalPrice Decimal     @db.Decimal(10, 2)
  concluded  Boolean     @default(false)
  items      OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  Int
  item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   String
  quantity Int
}

model Item {
  id           String      @id @default(uuid())
  name         String
  imageUrl     String
  description  String?
  price        Decimal     @db.Decimal(10, 2)
  barbershopId String
  barbershop   Barbershop  @relation("BarbershopItems", fields: [barbershopId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
}
